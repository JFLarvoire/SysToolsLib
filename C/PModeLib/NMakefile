###############################################################################
#									      #
#   File name:	    NMakefile						      #
#									      #
#   Description:    An NMake makefile to build the PMODE.LIB library          #
#									      #
#   Notes:	    The following macros / environment variables may          #
#		    be predefined. This allows to use the same makefile       #
#		    on a machine with both DOS & OS/2 versions of the         #
#		    tools.						      #
#		    							      #
#		     o DOS_AS		Assembler			      #
#		     o DOS_CC		C compiler			      #
#		     o DOS_LK		Linker				      #
#		     o DOS_LB		Librarian			      #
#		     o TMP		Temporary directory		      #
#		     o BIOSLIB		BIOS.LIB and include files	      #
#		     o LODOSLIB		LODOS.LIB and include files	      #
#									      #
#		    Supports the standard GNU targets:			      #
#		    all, clean, mostlyclean, distclean, dist		      #
#									      #
#   History:								      #
#    1995-02-07 JFL Adapted from NODOSLIB.MAK				      #
#    2015-10-19 JFL Added support for the new generic configure.bat/make.bat. #
#    2016-11-16 JFL Renamed from PMode.mak to NMakefile.		      #
#		    Added a few targets for use in recursive builds.	      #
#    2017-04-04 JFL Define SOURCES instead of OBJECTS, and use src2objs.mak.  #
#		    Use touch.exe if available, else use internal DOS	      #
#		     commands for doing the same, albeit less efficiently.    #
#		    Rebuild pmode.inc only after a distclean. Avoids warnings.#
#    2017-10-27 JFL Changed OUTDIR default to the bin subdirectory.           #
#    2017-12-18 JFL Renamed old upper-case-named sources to lower-case names. #
#    2024-10-15 JFL Adapted for use with the redesigned NMaker system.        #
#									      #
#      (c) Copyright 1995-2017 Hewlett Packard Enterprise Development LP      #
# Licensed under the Apache 2.0 license - www.apache.org/licenses/LICENSE-2.0 #
###############################################################################

ONLY_OS=DOS LODOS BIOS # Here we're dealing exclusively with programs for the BIOS or DOS
!INCLUDE <select_os.mak> # Returns OS=intersection($(OS), $(ONLY_OS))

# Memory model for C compilation and misc macros
MODELE=S			# Memory model for C compilation. Good for both small & tiny programs.

S=.				# Where to find source files
R=.				# Root output path.
!IF !DEFINED(OUTDIR)
OUTDIR=bin
OD=bin\			# Output directory - In the default bin subdirectory
!ELSEIF "$(OUTDIR)"=="."
OD=			# Output directory - In the current directory
!ELSE # It's defined and not empty
OD=$(OUTDIR)\		# Output directory - In the specified directory
!ENDIF
B=$(OUTDIR)			# Where to store binary executable files
BD=$(OD)			# Where to store binary executable files
O=$(OD)obj			# Object files relative path
L=$(OD)list			# List files relative path
N=$(BIOSLIB)			# Where to find the bioslib (ex nodoslib) files
M=$(LODOSLIB)			# Where to find the lodoslib files

.SUFFIXES: .inc .h

!IFDEF _DEBUG
DD=/D_DEBUG
!ELSE
DD=
!ENDIF

# Default values for macros TMP & LNK. Nmake always predefines AS & CC.
!IFNDEF TMP
!IFDEF TEMP
TMP=$(TEMP)
!ELSE
TMP=.
!ENDIF
!ENDIF

# Definitions set by the old go.bat, but not by the new make.bat
!IFDEF DOS_PATH
PATH=$(DOS_PATH)
CC=$(DOS_CC)
AS=$(DOS_AS)
LK=$(DOS_LK)
LB=$(DOS_LB)
!ENDIF

# Useful messaging macros
MSG=>con echo		# Command for writing a progress message on the console
HEADLINE=$(MSG).&$(MSG)	# Output a blank line, then a message
REPORT_FAILURE=$(MSG) ... FAILED. & exit /b # Report that a build failed, and forward the error code.

# Generalized rule for C compilation
CFLAGS=/A$(MODELE) $(DD) /Fc$(L)\ /Fo$(O)\ /G2rs /I$(N) /I$(M) /Oaes /W3 /Zpil
{$(S)}.c{$(O)}.obj:
    $(MSG) Compiling $(<F) ...
    $(CC) $(CFLAGS) /c $< || $(REPORT_FAILURE)
    $(MSG) ... done.

# Generalized rule for Assembly language.
AFLAGS=/c /Cx $(DD) /I$(N) /I$(M) /Fl$(L)\ /Fo$(O)\ /Sn /W3 /Zdim
{$(S)}.asm{$(O)}.obj:
    $(MSG) Assembling $(<F) ...
    $(AS) $(AFLAGS) /c $< || $(REPORT_FAILURE)
    $(MSG) ... done.

# Inference rule for .h files conversion
{$(S)}.h{$(S)}.inc:
    $(MSG) Converting $(<F) ...
    $(AS:ML=H2INC) /C $< || $(REPORT_FAILURE)
    $(MSG) ... done.

# Inference rule to link a test program
LIB=$(BIOSLIB);$(LODOSLIB);$(PMODE)
LIBS=bios.lib lodos.lib pmode.lib
LFLAGS=/map /li /batch /nod /noe /onerror:noexe
BB=NUL
{$(O)\}.obj{$(B)\}.com:
    @echo Applying inference rule {$$(O)\}.obj{$$(B)\}.com:
    $(MSG) Linking $(@F) ...
    set LIB=$(LIB)
    set PATH=$(PATH)
    copy << $(L)\$(*B).LNK
$(BIOSLIB)\OBJ\startcom.obj $**
$@
$(L)\$(*F)
$(LIBS)
$(LFLAGS) /tiny
<<NOKEEP
    @echo "	type $(L)\$(*B).LNK"
    @$(COMSPEC) /c "type $(L)\$(*B).LNK"
    $(LK) @$(L)\$(*B).LNK || $(REPORT_FAILURE)
    if exist $@ copy $@ $(BB)
    cd $(L)
    $(MAPSYM) $(*F).map
    cd $(MAKEDIR)
    $(MSG) ... done.

#*****************************************************************************#
#			     Specific dependancies			      #
#*****************************************************************************#

all pmodelib: headline check_reqs $(B)\pmode.lib

# Default log file name, etc
module_name:
    echo pmodelib

headline:
    $(HEADLINE) Building the PModeLib library

check_reqs:
    $(MSG) Checking requirements ...
    @cmd /e:on /v:on /c <<"$(TMP)\check_reqs-$(PID).bat" || $(REPORT_FAILURE) # Using an outside script to allow ORing ERR results
        @echo off & set "ERR=0" & set "CANT_FIND=Error: Configure.bat did not find"
	if not defined MSVC	set "ERR=1" & echo !CANT_FIND! Microsoft Visual C++ 1.x (MSVC)
	if not defined MASM	set "ERR=1" & echo !CANT_FIND! Microsoft Assembler (MASM)
	if not defined BIOSLIB	set "ERR=1" & echo !CANT_FIND! the BIOSLIB library
	if not defined LODOSLIB	set "ERR=1" & echo !CANT_FIND! the LODOSLIB library
        exit !ERR!
<<
    $(MSG) ... Done

# Create the subdirectories if they don't exist
dirs: $(B) $(O) $(L)

$(B) $(O) $(L):
    $(MSG) Creating directory $@
    mkdir $@

# Output the default goal name for make.bat
goal_name:
    echo pmode

# Erase all output files
mostlyclean:
    -rd /S /Q $(L)	>NUL 2>&1
    -rd /S /Q $(O)	>NUL 2>&1
    -del /Q *.pdb	>NUL 2>&1
    -del /Q *.bak	>NUL 2>&1
    -del /Q *~		>NUL 2>&1
    -del /Q *.log	>NUL 2>&1
    -del /Q *.zip	>NUL 2>&1

clean: mostlyclean
    -del /Q $(B)\*.lib	>NUL 2>&1
    -del /Q $(B)\*.com	>NUL 2>&1
!IF DEFINED(OUTDIR) && "$(OUTDIR)" != "" && "$(OUTDIR)" != "." && "$(OUTDIR)" != ".."
    -rd /S /Q $(OUTDIR)	>NUL 2>&1
!ENDIF

distclean: clean
    :# Maybe we should not clean pmode.inc or windef.inc, as h2inc.exe is only available with old MASM assemblers
    -del /Q pmode.inc	>NUL 2>&1 &:# Recreating it causes unavoidable warnings
    -del /Q windef.inc	>NUL 2>&1 &:# Recreating it causes unavoidable warnings
    -del /Q config.*	>NUL 2>&1

# Erase all global environment variables created by this build
VARS=PMODELIB		# Global environment variables generated here
cleanenv:
    call <<"$(TMP)\cleanenv-$(PID).bat" &:# Delete variables created here
      @echo off
      setlocal EnableExtensions EnableDelayedExpansion
      set "KEY=HKCU\Environment"
      if not "$(VARS)"=="" for %%v in ($(VARS)) do @(
	>>"$(TMP)\cleanenv-$(PID).lst" (echo %%v) &:# Pass the name back to make.bat, for deleting it in the current shell environment
	set "VALUE="
	for /f "tokens=1,3" %%a in ('reg query "%KEY%" ^| findstr /i /b /r /c:" *%%v "') do set VALUE="%%b"
	if defined VALUE ( :# The global environment variable exists. Delete it, using its actual name with the correct case.
	  set CMD=reg delete "%KEY%" /v %%v /f
	  echo !CMD!
	  !CMD! >NUL
	)
      )
<<

# Run the configure.bat script in every subdirectory
config:
    rem Nothing to do in $(MAKEDIR) as there is no further child level

# Dummy target, to display a help screen
help:
    @type <<
Targets:

  pmode     Rebuild the pmode.lib library (Default)
  clean     Delete all built files
  test      Build the pmode library tests (pmodetst.com and vcpitst.com)
  zip       Build a source archive in pmodelib.zip. Requires 7-zip.
<<NOKEEP

# Dummy target, to build a source archive
dist zip:
    $(MSG) Building pmodelib.zip ...
    if exist pmodelib.zip del pmodelib.zip
    set PATH=$(PATH);C:\Program Files\7-zip
    7z.exe a pmodelib.zip *.txt *.bat *.mak *.asm *.c *.h *.inc || $(REPORT_FAILURE)
    rem # Delete files that got dragged in by wild cards, but that we don't want in the source zip.
    7z.exe d pmodelib.zip config.*
    $(MSG) ... done.

# Build the library test programs
test: pmode pmodetst # vcpitst

pmodetst: dirs $(O)\pmodetst.obj $(B)\pmodetst.com

vcpitst: dirs $(O)\vcpitst.obj $(B)\vcpitst.com

SOURCES = \
    a20gate.c		\
    a20gatei.asm        \
    cpuid.asm           \
    dpmi.asm            \
    dpmigate.c          \
    flatcopy.c          \
    getpmlin.c          \
    mapp2l.c            \
    pm2appy.c           \
    rm2pm.asm           \
    segbase.asm         \
    vcpi.asm            \
    vm2pm.c             \
    x86.asm             \
    xms.asm             \

XSOURCES = \
    dpmitest.asm        \
    pmodetst.c          \
    vcpitst.asm         \

!IFDEF LOGFILE # Avoid doing that conversion for special unlogged targets like clean
PROGRAM=PMODELIB
!INCLUDE <src2objs.mak>
!ENDIF

$(B)\pmode.lib: dirs $(S)\pmode.inc $(OBJECTS)
    $(MSG) Creating $@ ...
    if exist $@ del $@ >nul
    $(LB) @<<$(L)\pmode.lnk || $(REPORT_FAILURE)
$@
y
$(OBJECTS)
$(L)\$(*B).lst ;
<<KEEP
    $(MSG) ... done.


# Include files dependancies

$(S)\a20gate.c:     $(S)\pmode.h	$(N)\clibdef.h

$(S)\a20gatei.asm:  $(N)\adefine.inc	$(N)\io8042.inc

$(S)\cpuid.asm:

$(S)\dpmi.asm:	    $(S)\pmode.inc

$(S)\dpmigate.c:    $(S)\pmode.h	$(N)\clibdef.h	    $(N)\utildef.h

$(S)\flatcopy.c:    $(S)\pmode.h	$(M)\lodos.h	    $(M)\msdos.h

$(S)\getpmlin.c:    $(S)\pmode.h	$(N)\clibdef.h	    $(N)\utildef.h

$(S)\mapp2l.c:	    $(S)\pmode.h

$(S)\pm2appy.c:     $(S)\pmode.h	$(N)\utildef.h	    $(M)\lodos.h

$(S)\pmode.h:	    $(S)\windef.h
    touch $@ || copy /b $@+NUL &:# Use touch.exe if available, else use internal DOS commands for doing the same, albeit less efficiently.

$(S)\pmode.inc:     $(S)\pmode.h	$(S)\windef.h

$(S)\rm2pm.asm:     $(N)\adefine.inc

$(S)\segbase.asm:   $(N)\adefine.inc

$(S)\vcpi.asm:

$(S)\vm2pm.c:	    $(S)\pmode.h	$(N)\utildef.h

$(S)\x86.asm:

$(S)\xms.asm:	    $(N)\adefine.inc


#*****************************************************************************#
#                          Test programs dependancies                         #
#*****************************************************************************#

$(B)\pmodetst.com:  \
	    $(S)\pmodetst.c	\
	    $(N)\clibdef.h	$(N)\utildef.h	    bios.lib		\
	    $(O)\startcom.obj	$(S)\pmode.h	    pmode.lib		\
	    lodos.lib

$(B)\scanmem.com:  \
	    $(S)\scanmem.c     \
	    $(N)\clibdef.h	$(N)\utildef.h	    bios.lib		\
	    $(O)\startcom.obj	$(S)\pmode.h	    pmode.lib

$(B)\vcpitst.com:   \
	    $(S)\vcpitst.asm	\
	    pmode.lib		$(S)\pmode.inc

$(B)\vcpitst.exe:   \
	    $(S)\vcpitst.asm	\
	    pmode.lib		$(S)\pmode.inc

$(B)\sysmap.com:    \
	    $(S)\sysmap.c	\
	    $(N)\clibdef.h	$(N)\utildef.h	    bios.lib		\
	    $(O)\startcom.obj	$(S)\pmode.h	    pmode.lib

$(B)\vxd.com:	 \
	    $(S)\vxd.c		\
	    $(N)\clibdef.h	$(N)\utildef.h	    bios.lib		\
	    $(O)\startcom.obj	$(S)\pmode.h	    pmode.lib
