###############################################################################
#									      #
#   File name	    NMakefile						      #
#									      #
#   Description     An NMake file for making all SysLib library versions      #
#									      #
#   Notes	    make.bat looks for a default nmake file called nmakefile. #
#									      #
#   History								      #
#    2015-11-04 JFL Split the old MultiOS.mak into NMakeFile and Files.mak.   #
#    2016-04-11 JFL Renamed NODOSLIB as BIOSLIB.                              #
#    2016-04-13 JFL Copy only the changed libraries into the central lib dir. #
#		    Make sure recursive make calls are always executed.	      #
#    2016-04-14 JFL Only build the target versions that can be built.         #
#    2016-04-22 JFL Renamed the MULTIOS library as SYSLIB.		      #
#    2016-09-27 JFL Added support for an optional OUTDIR.      		      #
#    2016-10-04 JFL Make sure nothing is displayed when doing a make clean.   #
#    2016-10-06 JFL Added targets mostlyclean & distclean.                    #
#    2016-10-11 JFL Adapted for use with make files in the global include dir.#
#    2016-10-13 JFL Added target cleanenv.                                    #
#    2016-11-03 JFL Avoid error with *clean targets defined twice.	      #
#		    Added target config.                                      #
#		    Updated the cleanenv: script to display the reg command   #
#		    it uses to delete the global environment variable.	      #
#    2016-11-07 JFL Do not copy include files to OUTDIR anymore.	      #
#    2016-11-16 JFL Removed the rule for copying INCDIR, not used anymore.    #
#    2017-02-24 JFL Renamed the special "goal_name" as "module_name".	      #
#    2019-02-08 JFL Added support for ARM and ARM64.			      #
#    2020-03-11 JFL Don't attempt to build for IA64 or ARM by default.        #
#    2022-12-21 JFL Changed the output subdirectories for DOS builds.         #
#    2022-12-22 JFL `make clean` fixes and improvements.                      #
#    2024-01-07 JFL Changed STINCLUDE to NMINCLUDE.			      #
#    2024-10-15 JFL Adapted for use with the redesigned NMaker system.        #
#		    							      #
#         © Copyright 2016 Hewlett Packard Enterprise Development LP          #
# Licensed under the Apache 2.0 license - www.apache.org/licenses/LICENSE-2.0 #
###############################################################################

!IF DEFINED(MESSAGES)
!MESSAGE Started NMakefile in $(MAKEDIR) # Display this make file name
!ENDIF

TEST_OS=DOS WIN95 WIN32 THIS # Build versions for these OSs when testing

!IF DEFINED(OUTDIR)
OD=$(OUTDIR)^\
LIBDIR=$(OUTDIR)\lib
!ELSE
OD=
LIBDIR=lib
!ENDIF

# Check requirements for 16-bits builds statically and silently 
!IF DEFINED(DOS_CC) && EXIST("$(NMINCLUDE)\BIOS.mak") && DEFINED(BIOSLIB)
REQS_BIOS=1
!ELSE
REQS_BIOS=0
!ENDIF
!IF DEFINED(DOS_CC) && EXIST("$(NMINCLUDE)\LODOS.mak") && DEFINED(LODOSLIB)
REQS_LODOS=1
!ELSE
REQS_LODOS=0
!ENDIF
!IF DEFINED(DOS_CC)
REQS_DOS=1
!ELSE
REQS_DOS=0
!ENDIF
# Check requirements for 32/64-bits builds statically and silently 
!IF DEFINED(WIN95_CC) && EXIST("$(NMINCLUDE)\WIN95.mak") && DEFINED(WIN95_WINSDK) && DEFINED(HAS_98DDK)
REQS_WIN95=1
!ELSE
REQS_WIN95=0
!ENDIF
!IF DEFINED(WIN32_CC)
REQS_WIN32=1
!ELSE
REQS_WIN32=0
!ENDIF
!IF DEFINED(IA64_CC) && EXIST("$(NMINCLUDE)\IA64.mak") && DEFINED(IA64_WINSDK)
REQS_IA64=1
!ELSE
REQS_IA64=0
!ENDIF
!IF DEFINED(WIN64_CC)
REQS_WIN64=1
!ELSE
REQS_WIN64=0
!ENDIF
!IF DEFINED(ARM_CC) && EXIST("$(NMINCLUDE)\ARM.mak") && DEFINED(ARM_WINSDK)
REQS_ARM=1
!ELSE
REQS_ARM=0
!ENDIF
!IF DEFINED(ARM64_CC) && EXIST("$(NMINCLUDE)\ARM64.mak") && DEFINED(ARM64_WINSDK)
REQS_ARM64=1
!ELSE
REQS_ARM64=0
!ENDIF

# $(OS) = List of target operating systems to build for, separated by spaces
# Note: The OS variable here conflicts with Windows' %OS%, defaulting to Windows_NT
!IF "$(OS)"=="all"
OS_ALL=1 # Note: Don't attempt to build IA64 or ARM versions by default, unless OS=all
!UNDEF OS
OS=
!ENDIF
!IF !DEFINED(OS) || "$(OS)"=="Windows_NT" # ie. if OS is not specified on the command line
OS=
!IF $(REQS_BIOS)
OS=$(OS) BIOS
!ENDIF
!IF $(REQS_LODOS)
OS=$(OS) LODOS
!ENDIF
!IF $(REQS_DOS)
OS=$(OS) DOS
!ENDIF
!IF $(REQS_WIN95)
OS=$(OS) WIN95
!ENDIF
!IF $(REQS_WIN32)
OS=$(OS) WIN32
!ENDIF
!IF $(REQS_IA64) && DEFINED(OS_ALL)
OS=$(OS) IA64
!ENDIF
!IF $(REQS_WIN64)
OS=$(OS) WIN64
!ENDIF
!IF $(REQS_ARM) && DEFINED(OS_ALL)
OS=$(OS) ARM
!ENDIF
!IF $(REQS_ARM64) && DEFINED(OS_ALL)
OS=$(OS) ARM64
!ENDIF
!ENDIF
!IF DEFINED(MESSAGES)
!MESSAGE OS=$(OS)
!ENDIF

MSG=>con echo		# Command for writing a progress message on the console
HEADLINE=$(MSG).&$(MSG)	# Output a blank line, then a message
REPORT_FAILURE=$(MSG) ... FAILED. & exit /b # Report that a build failed, and forward the error code.

# Add the /NOLOGO flags to MAKEFLAGS. But problem: MAKEFLAGS cannot be updated
MAKEFLAGS_=/$(MAKEFLAGS)# Also MAKEFLAGS does not contain the initial /
!IF "$(MAKEFLAGS_: =)"=="/" # And if no flag is provided, it still contains a dozen spaces
MAKEFLAGS_=		# In that case, clear the useless / and spaces
!ENDIF
MAKEFLAGS__=/_ /$(MAKEFLAGS) /_	# Temp variable to check if /NOLOGO is already there
!IF "$(MAKEFLAGS__: /NOLOGO =)"=="$(MAKEFLAGS__)"
MAKEFLAGS_=/NOLOGO $(MAKEFLAGS_)
!ENDIF
!UNDEF MAKEFLAGS__

!IF !DEFINED(DEBUG)
DEBUG=0
!ELSEIF "$(DEBUG)"=="all"
!UNDEF DEBUG
DEBUG=0 1
!ENDIF

!UNDEF MAKE_RELEASE
!IF "$(DEBUG:0=)"!="$(DEBUG)"
MAKE_RELEASE=1
!ENDIF

!UNDEF MAKE_DEBUG
!IF "$(DEBUG:1=)"!="$(DEBUG)"
MAKE_DEBUG=1
!ENDIF

# Command-line definitions that need carrying through to sub-make instances
# Note: Cannot redefine MAKEFLAGS, so defining an alternate variable instead.
MAKEDEFS="PROGRAM=SysLib" "LIBDIR=$(LIBDIR)"
!IF DEFINED(WINVER) # Windows target version. 4.0=Win95/NT4 5.1=XP 6.0=Vista ...
MAKEDEFS="WINVER=$(WINVER)" $(MAKEDEFS)
!ENDIF

# Do not include $(MAKEDEFS) in SUBMAKE definition, as macros can only be
# overriden by inserting a new value _ahead_ of the previous definitions.
SUBMAKE=$(MAKE) $(MAKEFLAGS_) /F "$(MAKEFILE)" # Recursive call to this make file

# Default goal: Generate all versions
syslib_default: headline all

headline:
    $(HEADLINE) Building all SysLib library versions

_OS_=_ $(OS) _

ALL = \
!IF !("$(_OS_: BIOS =)"=="$(_OS_)") # IF $(OS) contains BIOS
!IF $(REQS_BIOS)
     check_bios_opts \
!  IF DEFINED(MAKE_RELEASE)
     bios \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     bios\debug \
!  ENDIF
!ELSE # failed the static requirements test for BIOS builds
     explain_bios_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: LODOS =)"=="$(_OS_)") # IF $(OS) contains LODOS
!IF $(REQS_LODOS)
     check_lodos_opts \
!  IF DEFINED(MAKE_RELEASE)
     lodos \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     lodos\debug \
!  ENDIF
!ELSE # failed the static requirements test for LODOS builds
     explain_lodos_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: DOS =)"=="$(_OS_)") # IF $(OS) contains DOS
!IF $(REQS_DOS)
     check_dos_opts \
!  IF DEFINED(MAKE_RELEASE)
     dos \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     dos\debug \
!  ENDIF
!ELSE # failed the static requirements test for DOS builds
     explain_dos_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN95 =)"=="$(_OS_)") # IF $(OS) contains WIN95
!IF $(REQS_WIN95)
     check_win95_opts \
!  IF DEFINED(MAKE_RELEASE)
     win95 \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     win95\debug \
!  ENDIF
!ELSE # failed the static requirements test for Win95 builds
     explain_win95_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN32 =)"=="$(_OS_)") # IF $(OS) contains WIN32
!IF $(REQS_WIN32)
     check_win32_opts \
!  IF DEFINED(MAKE_RELEASE)
     win32 \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     win32\debug \
!  ENDIF
!ELSE # failed the static requirements test for Win32 builds
     explain_win32_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: IA64 =)"=="$(_OS_)") # IF $(OS) contains IA64
!IF $(REQS_IA64)
     check_ia64_opts \
!  IF DEFINED(MAKE_RELEASE)
     ia64 \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     ia64\debug \
!  ENDIF
!ELSE # failed the static requirements test for IA64 builds
     explain_ia64_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN64 =)"=="$(_OS_)") # IF $(OS) contains WIN64
!IF $(REQS_WIN64)
     check_win64_opts \
!  IF DEFINED(MAKE_RELEASE)
     win64 \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     win64\debug \
!  ENDIF
!ELSE # failed the static requirements test for Win64 builds
     explain_win64_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: ARM =)"=="$(_OS_)") # IF $(OS) contains ARM
!IF $(REQS_ARM)
     check_arm_opts \
!  IF DEFINED(MAKE_RELEASE)
     arm \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     arm\debug \
!  ENDIF
!ELSE # failed the static requirements test for ARM builds
     explain_arm_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: ARM64 =)"=="$(_OS_)") # IF $(OS) contains ARM64
!IF $(REQS_ARM64)
     check_arm64_opts \
!  IF DEFINED(MAKE_RELEASE)
     arm64 \
!  ENDIF
!  IF DEFINED(MAKE_DEBUG)
     arm64\debug \
!  ENDIF
!ELSE # failed the static requirements test for ARM64 builds
     explain_arm64_reqs \
!ENDIF
!ENDIF

syslib.lib: \
!IF !("$(_OS_: BIOS =)"=="$(_OS_)") # IF $(OS) contains BIOS
!IF $(REQS_BIOS)
     check_bios_opts bios \
!ELSE # failed the static requirements test for BIOS builds
     explain_bios_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: LODOS =)"=="$(_OS_)") # IF $(OS) contains LODOS
!IF $(REQS_LODOS)
     check_lodos_opts lodos \
!ELSE # failed the static requirements test for LODOS builds
     explain_lodos_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: DOS =)"=="$(_OS_)") # IF $(OS) contains DOS
!IF $(REQS_DOS)
     check_dos_opts dos \
!ELSE # failed the static requirements test for DOS builds
     explain_dos_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN95 =)"=="$(_OS_)") # IF $(OS) contains WIN95
!IF $(REQS_WIN95)
     check_win95_opts win95 \
!ELSE # failed the static requirements test for Win95 builds
     explain_win95_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN32 =)"=="$(_OS_)") # IF $(OS) contains WIN32
!IF $(REQS_WIN32)
     check_win32_opts win32 \
!ELSE # failed the static requirements test for Win32 builds
     explain_win32_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: IA64 =)"=="$(_OS_)") # IF $(OS) contains IA64
!IF $(REQS_IA64)
     check_ia64_opts ia64 \
!ELSE # failed the static requirements test for IA64 builds
     explain_ia64_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN64 =)"=="$(_OS_)") # IF $(OS) contains WIN64
!IF $(REQS_WIN64)
     check_win64_opts win64 \
!ELSE # failed the static requirements test for Win64 builds
     explain_win64_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: ARM = )"=="$(_OS_)") # IF $(OS) contains ARM
!IF $(REQS_ARM)
     check_arm_opts arm \
!ELSE # failed the static requirements test for ARM builds
     explain_arm_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: ARM64 =)"=="$(_OS_)") # IF $(OS) contains ARM64
!IF $(REQS_ARM64)
     check_arm64_opts arm64 \
!ELSE # failed the static requirements test for ARM64 builds
     explain_arm64_reqs \
!ENDIF
!ENDIF

debug\syslib.lib: \
!IF !("$(_OS_: BIOS =)"=="$(_OS_)") # IF $(OS) contains BIOS
!IF $(REQS_BIOS)
     check_bios_opts bios\debug \
!ELSE # failed the static requirements test for BIOS builds
     explain_bios_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: LODOS =)"=="$(_OS_)") # IF $(OS) contains LODOS
!IF $(REQS_LODOS)
     check_lodos_opts lodos\debug \
!ELSE # failed the static requirements test for LODOS builds
     explain_lodos_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: DOS =)"=="$(_OS_)") # IF $(OS) contains DOS
!IF $(REQS_DOS)
     check_dos_opts dos\debug \
!ELSE # failed the static requirements test for DOS builds
     explain_dos_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN95 =)"=="$(_OS_)") # IF $(OS) contains WIN95
!IF $(REQS_WIN95)
     check_win95_opts win95\debug \
!ELSE # failed the static requirements test for Win95 builds
     explain_win95_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN32 =)"=="$(_OS_)") # IF $(OS) contains WIN32
!IF $(REQS_WIN32)
     check_win32_opts win32\debug \
!ELSE # failed the static requirements test for Win32 builds
     explain_win32_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: IA64 =)"=="$(_OS_)") # IF $(OS) contains IA64
!IF $(REQS_IA64)
     check_ia64_opts ia64\debug \
!ELSE # failed the static requirements test for IA64 builds
     explain_ia64_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: WIN64 =)"=="$(_OS_)") # IF $(OS) contains WIN64
!IF $(REQS_WIN64)
     check_win64_opts win64\debug \
!ELSE # failed the static requirements test for Win64 builds
     explain_win64_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: ARM = )"=="$(_OS_)") # IF $(OS) contains ARM
!IF $(REQS_ARM)
     check_arm_opts arm\debug \
!ELSE # failed the static requirements test for ARM builds
     explain_arm_reqs \
!ENDIF
!ENDIF
!IF !("$(_OS_: ARM64 =)"=="$(_OS_)") # IF $(OS) contains ARM64
!IF $(REQS_ARM64)
     check_arm64_opts arm64\debug \
!ELSE # failed the static requirements test for ARM64 builds
     explain_arm64_reqs \
!ENDIF
!ENDIF

# Default log file name, etc
module_name:
    echo syslib

# Rules for checking dynamic dependancies, and explaining static ones
CANT_FIND=Configure.bat did not find

explain_bios_reqs:
    $(MSG) Skipping BIOS builds as some requirements are not met:
    if not defined DOS_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ 1.x compiler (MSVC)
    if not defined BIOSLIB	$(MSG) $(CANT_FIND) the BIOSLIB library

explain_lodos_reqs:
    $(MSG) Skipping LODOS builds as some requirements are not met:
    if not defined DOS_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ 1.x compiler (MSVC)
    if not defined LODOSLIB	$(MSG) $(CANT_FIND) the LODOSLIB library

explain_dos_reqs:
    $(MSG) Skipping DOS builds as some requirements are not met:
    if not defined DOS_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ 1.x compiler (MSVC)

explain_win95_reqs:
    $(MSG) Skipping WIN95 builds as some requirements are not met:
    if not defined WIN95_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ x86 compiler for Win95 (WIN95_CC)

explain_win32_reqs:
    $(MSG) Skipping WIN32 builds as some requirements are not met:
    if not defined WIN32_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ x86 compiler (WIN32_CC)

explain_ia64_reqs:
    $(MSG) Skipping IA64 builds as some requirements are not met:
    if not defined IA_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ IA64 compiler (IA64_CC)

explain_win64_reqs:
    $(MSG) Skipping WIN64 builds as some requirements are not met:
    if not defined WIN64_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ amd64 compiler (WIN64_CC)

explain_arm_reqs:
    $(MSG) Skipping ARM builds as some requirements are not met:
    if not defined ARM_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ arm compiler (ARM_CC)

explain_arm64_reqs:
    $(MSG) Skipping ARM64 builds as some requirements are not met:
    if not defined ARM64_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ arm64 compiler (ARM64_CC)

check_bios_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.

check_lodos_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.

check_dos_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.
    @if not defined LMPTK $(MSG) Warning: LMPTK undefined. Dropping netbios and parts of uuid modules build.

check_win95_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.
    @if not defined 98DDK $(MSG) Warning: 98DDK undefined. Dropping support for Win9X disk I/O. Only NT4 disk I/O supported.

check_win32_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.

check_ia64_opts: check_win32_opts

check_win64_opts: check_win32_opts

check_arm_opts: check_win32_opts

check_arm64_opts: check_win32_opts

# Rules for building specific versions of the SysLib library
bios: lib\bios

lodos: lib\lodos

dos: lib\dos

win95: lib\win95

win32: lib\win32

ia64: lib\ia64

win64: lib\win64

arm: lib\arm

arm64: lib\arm64

bios\debug: lib\bios\debug

lodos\debug: lib\lodos\debug

dos\debug: lib\dos\debug

win95\debug: lib\win95\debug

win32\debug: lib\win32\debug

ia64\debug: lib\ia64\debug

win64\debug: lib\win64\debug

arm\debug: lib\arm\debug

arm64\debug: lib\arm64\debug

# Rules for building Centralized copies of the SysLib library
$(LIBDIR):
    $(MSG) Creating directory $(LIBDIR)
    md $(LIBDIR)

lib\bios: $(LIBDIR)\SysLibbt.lib

$(LIBDIR)\SysLibbt.lib: $(OD)BIOS\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)BIOS\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library BIOS release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\BIOS.mak "MEM=T" $(MAKEDEFS) "DEBUG=0" dirs $@

lib\lodos: $(LIBDIR)\SysLiblt.lib

$(LIBDIR)\SysLiblt.lib: $(OD)LODOS\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)LODOS\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library LODOS release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\LODOS.mak "MEM=T" $(MAKEDEFS) "DEBUG=0" dirs $@

lib\dos: lib\dosT lib\dosS lib\dosL
    rem All DOS versions done

lib\dosT: $(LIBDIR)\SysLibdt.lib

$(LIBDIR)\SysLibdt.lib: $(OD)DOS\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS tiny release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\DOS.mak "MEM=T" $(MAKEDEFS) "DEBUG=0" dirs $@

lib\dosS: $(LIBDIR)\SysLibds.lib

$(LIBDIR)\SysLibds.lib: $(OD)DOS\S\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\S\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS small release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\DOS.mak "MEM=S" $(MAKEDEFS) "DEBUG=0" dirs $@

lib\dosL: $(LIBDIR)\SysLibdl.lib

$(LIBDIR)\SysLibdl.lib: $(OD)DOS\L\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\L\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS large release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\DOS.mak "MEM=L" $(MAKEDEFS) "DEBUG=0" dirs $@

lib\win95: $(LIBDIR)\SysLibw95.lib

$(LIBDIR)\SysLibw95.lib: $(OD)WIN95\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN95\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN95 release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\WIN95.mak $(MAKEDEFS) "DEBUG=0" dirs $@

lib\win32: $(LIBDIR)\SysLibw32.lib

$(LIBDIR)\SysLibw32.lib: $(OD)WIN32\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN32\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN32 release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\WIN32.mak $(MAKEDEFS) "DEBUG=0" dirs $@

lib\ia64: $(LIBDIR)\SysLibia64.lib

$(LIBDIR)\SysLibia64.lib: $(OD)IA64\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)IA64\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library IA64 release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\IA64.mak $(MAKEDEFS) "DEBUG=0" dirs $@

lib\win64: $(LIBDIR)\SysLibw64.lib

$(LIBDIR)\SysLibw64.lib: $(OD)WIN64\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN64\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN64 release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\WIN64.mak $(MAKEDEFS) "DEBUG=0" dirs $@

lib\arm: $(LIBDIR)\SysLiba32.lib

$(LIBDIR)\SysLiba32.lib: $(OD)ARM\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)ARM\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library ARM release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\ARM.mak $(MAKEDEFS) "DEBUG=0" dirs $@

lib\arm64: $(LIBDIR)\SysLiba64.lib

$(LIBDIR)\SysLiba64.lib: $(OD)ARM64\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)ARM64\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library ARM64 release version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\ARM64.mak $(MAKEDEFS) "DEBUG=0" dirs $@


lib\bios\debug: $(LIBDIR)\SysLibbtd.lib

$(LIBDIR)\SysLibbtd.lib: $(OD)BIOS\Debug\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)BIOS\Debug\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library BIOS debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\BIOS.mak "DEBUG=1" "MEM=T" $(MAKEDEFS) dirs $@

lib\lodos\debug: $(LIBDIR)\SysLibltd.lib

$(LIBDIR)\SysLibltd.lib: $(OD)LODOS\Debug\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)LODOS\Debug\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library LODOS debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\LODOS.mak "DEBUG=1" "MEM=T" $(MAKEDEFS) dirs $@

lib\dos\debug: lib\dosT\debug lib\dosS\debug lib\dosL\debug
    rem All DOS versions done

lib\dosT\debug: $(LIBDIR)\SysLibdtd.lib

$(LIBDIR)\SysLibdtd.lib: $(OD)DOS\Debug\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\Debug\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS tiny debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\DOS.mak "DEBUG=1" "MEM=T" $(MAKEDEFS) dirs $@

lib\dosS\debug: $(LIBDIR)\SysLibdsd.lib

$(LIBDIR)\SysLibdsd.lib: $(OD)DOS\Debug\S\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\Debug\S\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS small debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\DOS.mak "DEBUG=1" "MEM=S" $(MAKEDEFS) dirs $@

lib\dosL\debug: $(LIBDIR)\SysLibdld.lib

$(LIBDIR)\SysLibdld.lib: $(OD)DOS\Debug\L\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\Debug\L\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS large debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\DOS.mak "DEBUG=1" "MEM=L" $(MAKEDEFS) dirs $@

lib\win32\debug: $(LIBDIR)\SysLibw32d.lib

$(LIBDIR)\SysLibw32d.lib: $(OD)WIN32\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN32\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN32 debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\WIN32.mak "DEBUG=1" $(MAKEDEFS) dirs $@

lib\win95\debug: $(LIBDIR)\SysLibw95d.lib

$(LIBDIR)\SysLibw95d.lib: $(OD)WIN95\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN95\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN95 debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\WIN95.mak "DEBUG=1" $(MAKEDEFS) dirs $@

lib\ia64\debug: $(LIBDIR)\SysLibia64d.lib

$(LIBDIR)\SysLibia64d.lib: $(OD)IA64\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)IA64\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library IA64 debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\IA64.mak "DEBUG=1" $(MAKEDEFS) dirs $@

lib\win64\debug: $(LIBDIR)\SysLibw64d.lib

$(LIBDIR)\SysLibw64d.lib: $(OD)WIN64\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN64\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN64 debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\WIN64.mak "DEBUG=1" $(MAKEDEFS) dirs $@

lib\arm\debug: $(LIBDIR)\SysLiba32d.lib

$(LIBDIR)\SysLiba32d.lib: $(OD)ARM\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)ARM\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library ARM debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\ARM.mak "DEBUG=1" $(MAKEDEFS) dirs $@

lib\arm64\debug: $(LIBDIR)\SysLiba64d.lib

$(LIBDIR)\SysLiba64d.lib: $(OD)ARM64\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)ARM64\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library ARM64 debug version
    $(MAKE) $(MAKEFLAGS_) /f $(NMINCLUDE)\ARM64.mak "DEBUG=1" $(MAKEDEFS) dirs $@

# Dummy target, to build a source archive
dist zip: SysLib.lib
    $(MSG) Building SysLib.zip
    if exist SysLib.zip del SysLib.zip
    set PATH=$(PATH);C:\Program Files\7-zip
    7z.exe a SysLib.zip *.txt *.bat *.mak *makefile exe *.c *.h
    rem # Delete files that got dragged in by wild cards, but that we don't want in the source zip.
    7z.exe d SysLib.zip config.bat config.*.bat

# Erase all global environment variables created by this build
VARS=SYSLIB		# Global environment variables generated here
cleanenv:
    call <<"$(TMP)\cleanenv-$(PID).bat" &:# Delete variables created here
      @echo off
      setlocal EnableExtensions EnableDelayedExpansion
      set "KEY=HKCU\Environment"
      if not "$(VARS)"=="" for %%v in ($(VARS)) do @(
	>>"$(TMP)\cleanenv-$(PID).lst" (echo %%v) &:# Pass the name back to make.bat, for deleting it in the current shell environment
	set "VALUE="
	for /f "tokens=1,3" %%a in ('reg query "%KEY%" ^| findstr /i /b /r /c:" *%%v "') do set VALUE="%%b"
	if defined VALUE ( :# The global environment variable exists. Delete it, using its actual name with the correct case.
	  set CMD=reg delete "%KEY%" /v %%v /f
	  echo !CMD!
	  !CMD! >NUL
	)
      )
<<

# Run the configure.bat script in every subdirectory
config:
    rem Nothing to do in $(MAKEDIR) as there is no further child level

!INCLUDE <All.mak>
