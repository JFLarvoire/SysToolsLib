###############################################################################
#									      #
#   File name	    NMakefile						      #
#									      #
#   Description     An NMake file for making all SysToolLib libs & programs   #
#									      #
#   Notes	    make.bat looks for a default nmake file called NMakeFile. #
#									      #
#		    (make release) generates a zip file with all the EXEs     #
#		    built by make in this C directory, and all the scripts    #
#		    in the Batch, PowerShell, Python, Shell, Tcl directories. #
#		    The list of programs from the C\SRC dir is generated by   #
#		    the command (make -C SRC list_programs).		      #
#		    The list of scripts to copy for the various scripts	      #
#		    directories is extracted from file Scripts.lst.	      #
#		    Finally, if directories Extras\bin\Win32 and/or ...\Win64 #
#		    are present, the EXEs there are included as well.	      #
#		    							      #
#   History								      #
#    2016-10-05 JFL jf.larvoire@hpe.com created this file.                    #
#    2016-10-11 JFL Adapted for use with make files in the global include dir.#
#    2016-10-13 JFL Added targets cleanenv and release.                       #
#    2016-10-14 JFL Fixed bugs in the inline release script.                  #
#    2016-11-02 JFL Use macro BATMAKE for recursive calls to make.bat.        #
#    2016-11-03 JFL Added target config.                                      #
#		    Updated the cleanenv: script to display the reg command   #
#		    it uses to delete the global environment variable.	      #
#    2017-03-16 JFL Resurrected this file, necessary to make release.         #
#    2017-08-29 JFL Added a help target overrifing the one in All.mak.        #
#    2017-10-05 JFL Store WIN64 programs too in the release file.             #
#    2017-10-22 JFL Use %OUTDIR% to locate the *.exe programs.                #
#    2017-10-27 JFL Improved make release: Better messages and error reports. #
#		    Warn about missing exes. Store DOS, WIN64, etc, programs. #
#    2017-10-30 JFL Adapt the help message depending on OUTDIR.               #
#    2018-01-10 JFL 'make release' adds ag.exe if it's linked in Ag\.         #
#    2018-01-23 JFL Added a 'make source-release' rule.			      #
#    2018-01-25 JFL Add 32-bits *.exe from WIN32, if not available in WIN95.  #
#    2018-03-17 JFL Generalized the release of extra tools like Ag.           #
#    2018-11-20 JFL 'make release' adds the LICENSE file.                     #
#    2019-02-05 JFL 'make release' now support scripts in subdirectories.     #
#    2019-04-23 JFL 'make release' includes scripts in the Python directory.  #
#    2019-04-23 JFL Add extras from \bin, if none found in %\OUTDIR%.	      #
#		    Add ARM64 executables.				      #
#		    Added the EXEC macro, and use it for all 7-zip calls.     #
#    2019-11-22 JFL Add extras scripts from \bin\Scripts\.		      #
#    2024-10-15 JFL Adapted for use with the redesigned NMaker system.        #
#		    							      #
#         © Copyright 2016 Hewlett Packard Enterprise Development LP          #
# Licensed under the Apache 2.0 license - www.apache.org/licenses/LICENSE-2.0 #
###############################################################################

TEST_OS=DOS WIN95 WIN32 THIS # Build versions for these OSs when testing

!IF !DEFINED(OUTDIR)
OUTDIR=bin
OD=bin\			# Output directory - In the default bin subdirectory
!ELSEIF "$(OUTDIR)"=="."
OD=			# Output directory - In the current directory
!ELSE # It's defined and not empty
OD=$(OUTDIR)\		# Output directory - In the specified directory
!ENDIF

default: all

# This help definition overrides the second one included in All.mak below.
help:
    type <<
Usage: make.bat [options] [nmake_options] [macro_definitions] [targets] ...

Macro definitions:     (They must be quoted, else the = sign will be lost)
  "DEBUG=1"            Generate the debug version. <==> Target in a Debug\ dir.
  "OS=BIOS DOS WIN95 WIN32 WIN64 ARM ARM64"   List of target OSs to build for
  "WINVER=4.0"         Target OS version. 4.0=Win95/NT4, 5.1=WinXP, 6.1=Win7

Targets:
  all                  Build all available sources (default)
  clean                Erase all output files
  distclean            Erase all output files and all configuration files
  release              Generate a ..\$(OD)SysTools.zip release
  source-release       Generate a ..\$(OD)SysTools-src.zip release
<<

# Include common definitions
!INCLUDE <All.mak>

# Create an MsvcLibX binary release
release:
    call <<"$(TMP)\MsvcLibX-release-$(PID).bat"
	@echo off
	setlocal EnableExtensions EnableDelayedExpansion
	goto :main
	
	:msg
	echo %*
	$(MSG) %*
	exit /b
	
	:exec
	echo %*
	%*
	exit /b
	
	:main
	set "EXEC=call :exec"
	set "MSG=call :msg"
	%MSG% Enumerating files available by category
	
	:# Select the output directory
	set "CONFIG.H=config.%COMPUTERNAME%.h"
	if not exist %CONFIG.H% set "CONFIG.H=config.h"
	if exist %CONFIG.H% call %CONFIG.H%
	if not defined OUTDIR (
	  set "\OUTDIR=\bin"
	) else if "%OUTDIR%"=="." (
	  set "\OUTDIR="
	) else (
	  set "\OUTDIR=\%OUTDIR%"
	)
	
	:# Set the output file name
	pushd .. & set "ZIP=!CD!%\OUTDIR%\SysTools.zip" & popd
	
	:# Select the 32-bits programs directory to use.
	for %%d in (WIN95 WINXP WIN32) do ( :# May be overriden by setting PROGRAMS_DIR before running make release.
	  if not defined PROGRAMS_DIR if exist SRC%\OUTDIR%\%%d (
	    pushd SRC%\OUTDIR%\%%d & set "PROGRAMS_DIR=!CD!" & popd
	  )
	)
	if not exist "%PROGRAMS_DIR%" (%MSG% Error: Can't find the programs directory. & exit 1) &:# Also fails if it's not defined

	:# Build the program list
	set "QUIET_MAKE=1" &:# Tell All.mak, etc, to skip low priority information messages
	%FOREACHLINE% %%f in ('$(BMAKE) -C SRC list_programs') do set "PROGRAMS=%%f"
	:# Output the lists of programs that will be archived, per subdirectory
	%MSG% C = (!PROGRAMS!)
	if not defined PROGRAMS (%MSG% Error: Can't get the programs list. & exit 1)
	
	:# Look for optional extra goodies, copied from other projects
	set "EXTRAS="
	set "EXTRAS0="
	set "\EXTRAS0DIR="
	for %%p in (%\OUTDIR% \bin) do if not defined EXTRAS0 (
	  if exist ..\Extras%%p\Scripts\* (
	    set "\EXTRAS0DIR=%%p\Scripts"
	    pushd ..\Extras%%p\Scripts
	    for %%f in (*) do (
	      set "EXTRAS0=!EXTRAS0! %%f"
	      set "EXTRAS=!EXTRAS! %%f"
	    )
	    set "EXTRAS0=!EXTRAS0:~1!"
	    popd
	  )
	)
	set "EXTRAS32="
	set "\EXTRAS32DIR="
	for %%p in (%\OUTDIR% \bin) do if not defined EXTRAS32 (
	  if exist ..\Extras%%p\WIN32\*.exe (
	    set "\EXTRAS32DIR=%%p"
	    pushd ..\Extras%%p\WIN32
	    for %%f in (*.exe) do (
	      set "EXTRAS32=!EXTRAS32! %%f"
	      set "EXTRAS=!EXTRAS! %%f"
	    )
	    set "EXTRAS32=!EXTRAS32:~1!"
	    popd
	  )
	)
	set "EXTRAS64="
	set "\EXTRAS64DIR="
	for %%p in (%\OUTDIR% \bin) do if not defined EXTRAS64 (
	  if exist ..\Extras%%p\WIN64\*.exe (
	    set "\EXTRAS64DIR=%%p"
	    pushd ..\Extras%%p
	    for %%f in (Win64\*.exe) do (
	      set "EXTRAS64=!EXTRAS64! %%f"
	      if not exist "Win32\%%~nxf" set "EXTRAS=!EXTRAS! %%~nxf"
	    )
	    set "EXTRAS64=!EXTRAS64:~1!"
	    popd
	  )
	)
	if defined EXTRAS (
	  set "EXTRAS=!EXTRAS:~1!"
	  %MSG% Extras = (!EXTRAS!)
	)

	:# List scripts from Scripts.lst
	pushd ..
	for %%l in (Batch PowerShell Python Shell Tcl) do (
	  set "%%l=:" &:# The list must not be empty, else the search will fail in the second part.
	  for /f "delims=" %%f in ('findstr /i /r "^%%l\\\\" ^<Scripts.lst') do (
	    echo From Scripts.lst: %%f
	    set "F=%%f"
	    set %%l=!%%l! "!F:%%l\=!"
	  )
	  :# Also add the libraries from ScriptLibs.lst, but only if not already defined in Scripts.lst.
	  for /f "delims=" %%f in ('findstr /i /r "^%%l\\\\" ^<ScriptLibs.lst') do (
	    echo From ScriptsLibs.lst: %%f
	    set "FOUND=" & for %%p in (!%%l!) do if %%p=="%%~nxf" set "FOUND=1"
	    if not defined FOUND set %%l=!%%l! "%%~nxf"
	  )
	  set "%%l=!%%l:~1!" &:# Remove the initial colon we put in at first
	  if defined %%l set "%%l=!%%l:~1!" & rem :# Remove the separator space added with each append
	  set "LIST=(!%%l!)"
	  %MSG% %%l = !LIST!
	)
	popd
	
	:# Rebuild a new zip file
	set PATH=%PATH%;C:\Program Files\7-zip
	if exist "%ZIP%" del "%ZIP%"
	%MSG% Creating "%ZIP%"

	:# Add 32-bits programs (from the selected dir in WIN95 WINXP WIN32)
	%MSG% Adding C WIN32 programs from %PROGRAMS_DIR%
	pushd "%PROGRAMS_DIR%"
	for %%p in ("%CD%") do set "WIN32=%%~nxp"
	:# But some programs may not have been built, if the necessary libraries are missing.
	set "ALL_PROGRAMS=%PROGRAMS%"
	set "PROGRAMS="
	set "PROGRAMS2="
	for %%p in (%ALL_PROGRAMS%) do (
	  if exist %%p (
	    set "PROGRAMS=!PROGRAMS! %%p"
	  ) else if exist "..\WIN32\%%~p" (
	    %MSG% Warning: %WIN32%\%%p not found. Using that in WIN32 instead.
	    set "PROGRAMS2=!PROGRAMS2! %%p"
	  ) else (
	    %MSG% Warning: %WIN32%\%%p not found
	  )
	)
	if defined PROGRAMS (
	  set "PROGRAMS=!PROGRAMS:~1!
	  %EXEC% 7z.exe -- a "%ZIP%" !PROGRAMS!
	  if errorlevel 1 exit /b
	)
	if defined PROGRAMS2 ( :# Add the missing ones from WIN32 if avail. there
	  set "PROGRAMS2=!PROGRAMS2:~1!
	  cd ..\WIN32
	  %EXEC% 7z.exe -- a "%ZIP%" !PROGRAMS2!
	  if errorlevel 1 exit /b
	  )
	popd
	
	:# Add DOS and WIN64 programs if they're available and not yet added
	for %%o in (DOS IA64 WIN64 ARM ARM64) do (
	  if exist SRC%\OUTDIR%\%%o\*.exe for %%d in ("%PROGRAMS_DIR%") do if /I "%%~nxd" NEQ "%%o" (
	    pushd SRC%\OUTDIR%
	    pushd %%o & set "PROGRAMS%%o_DIR=!CD!" & popd
	    %MSG% Adding C %%o programs from !PROGRAMS%%o_DIR!
	    :# Some programs may not have been built, if the necessary libraries are missing.
	    set "PROGRAMS%%o="
	    for %%p in (%ALL_PROGRAMS%) do if exist %%o\%%p (
	      set "PROGRAMS%%o=!PROGRAMS%%o! %%o\%%p"
	    ) else (
	      findstr /C:"no %%o version" "%CD%\SRC\%%~np.mak" >NUL 2>NUL || %MSG% Warning: %%p not found
	    )
	    if defined PROGRAMS%%o set "PROGRAMS%%o=!PROGRAMS%%o:~1!
	    %EXEC% 7z.exe -- a "%ZIP%" !PROGRAMS%%o!
	    if errorlevel 1 exit /b
	    popd
	  )
	)

	:# Add extra scripts, like WhereAmI.bat, if present
	if defined EXTRAS0 (
	  pushd ..\Extras%\EXTRAS0DIR%
	  %MSG% Adding Extra scripts from !CD!
	  %EXEC% 7z.exe -- a "%ZIP%" !EXTRAS0!
	  if errorlevel 1 exit /b
	  popd
	)
	:# Add extra WIN32 tools, like The Silver Searcher, if present
	if defined EXTRAS32 (
	  pushd ..\Extras%\EXTRAS32DIR%\WIN32
	  %MSG% Adding Extra WIN32 programs from !CD!
	  %EXEC% 7z.exe -- a "%ZIP%" !EXTRAS32!
	  if errorlevel 1 exit /b
	  popd
	)
	:# Add extra WIN64 tools, like The Silver Searcher, if present
	if defined EXTRAS64 (
	  pushd ..\Extras%\EXTRAS64DIR%
	  %MSG% Adding Extra WIN64 programs from !CD!\WIN64
	  %EXEC% 7z.exe -- a "%ZIP%" !EXTRAS64!
	  if errorlevel 1 exit /b
	  popd
	)
	
	:# Add scripts for each language
	for %%l in (Batch PowerShell Python Shell Tcl) do if defined %%l (
	  pushd ..\%%l
	  %MSG% Adding %%l scripts from !CD!
	  %EXEC% 7z.exe -- a "%ZIP%" !%%l!
	  if errorlevel 1 exit /b
	  popd
	)
	
	:# Add the doc files
	%MSG% Adding README
	pushd ..\Docs
	%EXEC% 7z.exe a "%ZIP%" Catalog.md
	if errorlevel 1 exit /b
	%EXEC% 7z.exe rn "%ZIP%" Catalog.md README.md
	if errorlevel 1 exit /b
	popd
	%MSG% Adding LICENSE
	pushd ..
	%EXEC% 7z.exe a "%ZIP%" LICENSE.*
	popd
	
	:# Conclusion
	%MSG% %ZIP% done
<<

source-release:
    call <<"$(TMP)\MsvcLibX-source-release-$(PID).bat"
	@echo off
	setlocal EnableExtensions EnableDelayedExpansion
	goto :main
	
	:msg
	echo %*
	$(MSG) %*
	exit /b
	
	:exec
	echo %*
	%*
	exit /b
	
	:main
	set "EXEC=call :exec"
	set "MSG=call :msg"
	
	:# Select the output directory
	set "CONFIG.H=config.%COMPUTERNAME%.h"
	if not exist %CONFIG.H% set "CONFIG.H=config.h"
	if exist %CONFIG.H% call %CONFIG.H%
	if not defined OUTDIR (
	  set "\OUTDIR=\bin"
	) else if "%OUTDIR%"=="." (
	  set "\OUTDIR="
	) else (
	  set "\OUTDIR=\%OUTDIR%"
	)
	
	:# Set the output file name
	pushd .. & set "ZIP=!CD!%\OUTDIR%\SysTools-src.zip" & popd
	
	:# Rebuild a new zip file
	set "PATH=%PATH%;C:\Program Files\7-zip;C:\Program Files\Git\cmd"
	if exist "%ZIP%" del "%ZIP%"
	%MSG% Creating "%ZIP%"

	pushd ..
	:# Problem: The list size is > 8KB, which confuses the batch parser
	:# So split it into several sub-lists of smaller sizes
	set "LOWCLIBS="
	set "HICLIBS="
	set "OTHERS="
	for /f "delims=" %%f in ('git ls-files') do (
	  set "FILE=./%%f"
	  if        not "!FILE:/C/BiosLib/=!"=="!FILE!" (
	    set LOWCLIBS=!LOWCLIBS! "%%f"
	  ) else if not "!FILE:/C/LoDosLib/=!"=="!FILE!" (
	    set LOWCLIBS=!LOWCLIBS! "%%f"
	  ) else if not "!FILE:/C/=!"=="!FILE!" (
	    set HICLIBS=!HICLIBS! "%%f"
	  ) else (
	    set OTHERS=!OTHERS! "%%f"
	  )
	)
	set OTHERS=!OTHERS: ".gitattributes"=!
	for %%v in (OTHERS LOWCLIBS HICLIBS) do (
	  set %%v=!%%v:/=\!
	  %EXEC% 7z.exe a -- "%ZIP%" !%%v!
	)
	:# for /f %%f in ('git ls-files') do 7z.exe -- a "%ZIP%" "%%f"
	popd
	
	:# Conclusion
	%MSG% %ZIP% done
<<
